
task4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000600  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007d8  080007d8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007d8  080007d8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080007d8  080007d8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007d8  080007d8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d8  080007d8  000107d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007dc  080007dc  000107dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080007e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000024  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000df1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002b7  00000000  00000000  00020e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  000210e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000060  00000000  00000000  00021180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001373a  00000000  00000000  000211e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000adb  00000000  00000000  0003491a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006f916  00000000  00000000  000353f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000a4d0b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000184  00000000  00000000  000a4d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000008 	.word	0x20000008
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080007c0 	.word	0x080007c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000000c 	.word	0x2000000c
 8000214:	080007c0 	.word	0x080007c0

08000218 <main>:
static void GPIO_init(void);


/* ------------------------------------ M A I N --------------------------------------- */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800021c:	b672      	cpsid	i
}
 800021e:	bf00      	nop
    /* --- initialization --- */
    __disable_irq();        // disable interrupts globally

    GPIO_init();
 8000220:	f000 f804 	bl	800022c <GPIO_init>
  __ASM volatile ("cpsie i" : : : "memory");
 8000224:	b662      	cpsie	i
}
 8000226:	bf00      	nop

    /* --- one time tasks --- */


    /* --- infinite processing loop --- */
    while (1)
 8000228:	e7fe      	b.n	8000228 <main+0x10>
	...

0800022c <GPIO_init>:
 * requires:    - nothing -
 * parameters:  - none -
 * returns:     - nothing -
\* ------------------------------------------------------------------------------------ */
static void GPIO_init(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
    /* enable port clocks */
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // LEDs: A
 8000230:	4b72      	ldr	r3, [pc, #456]	; (80003fc <GPIO_init+0x1d0>)
 8000232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000234:	4a71      	ldr	r2, [pc, #452]	; (80003fc <GPIO_init+0x1d0>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;    // Buttons: B
 800023c:	4b6f      	ldr	r3, [pc, #444]	; (80003fc <GPIO_init+0x1d0>)
 800023e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000240:	4a6e      	ldr	r2, [pc, #440]	; (80003fc <GPIO_init+0x1d0>)
 8000242:	f043 0302 	orr.w	r3, r3, #2
 8000246:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB2ENR |= 1;						// Multiplexer Takt
 8000248:	4b6c      	ldr	r3, [pc, #432]	; (80003fc <GPIO_init+0x1d0>)
 800024a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800024c:	4a6b      	ldr	r2, [pc, #428]	; (80003fc <GPIO_init+0x1d0>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6613      	str	r3, [r2, #96]	; 0x60


    /* --- LEDs --- */
    GPIOA->ODR |= MASK_LED_RED;
 8000254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3 << 0);
 8000264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026e:	f023 0303 	bic.w	r3, r3, #3
 8000272:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << 0);               // set LED pin to output
 8000274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6013      	str	r3, [r2, #0]

    GPIOA->ODR |= MASK_LED_YELLOW;
 8000284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3 << 2);
 8000294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029e:	f023 030c 	bic.w	r3, r3, #12
 80002a2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << 2);               // set LED 1 pin (PA1) to output
 80002a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	6013      	str	r3, [r2, #0]

    GPIOA->ODR |= MASK_LED_GREEN;
 80002b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3 << 4);
 80002c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80002d2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << 4);               // set LED 2 pin (PA2) to output
 80002d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	6013      	str	r3, [r2, #0]

    GPIOA->ODR |= MASK_LED_BLUE;
 80002e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ee:	f043 0308 	orr.w	r3, r3, #8
 80002f2:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3 << 6);
 80002f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000302:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << 6);               // set LED 3 pin (PA3) to output
 8000304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800030e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000312:	6013      	str	r3, [r2, #0]

    GPIOB->IDR |= MASK_S1;
 8000314:	4b3a      	ldr	r3, [pc, #232]	; (8000400 <GPIO_init+0x1d4>)
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	4a39      	ldr	r2, [pc, #228]	; (8000400 <GPIO_init+0x1d4>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6113      	str	r3, [r2, #16]
    GPIOB->MODER &= ~(3 << 8);
 8000320:	4b37      	ldr	r3, [pc, #220]	; (8000400 <GPIO_init+0x1d4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a36      	ldr	r2, [pc, #216]	; (8000400 <GPIO_init+0x1d4>)
 8000326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800032a:	6013      	str	r3, [r2, #0]

    GPIOB->IDR |= MASK_S2;
 800032c:	4b34      	ldr	r3, [pc, #208]	; (8000400 <GPIO_init+0x1d4>)
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	4a33      	ldr	r2, [pc, #204]	; (8000400 <GPIO_init+0x1d4>)
 8000332:	f043 0320 	orr.w	r3, r3, #32
 8000336:	6113      	str	r3, [r2, #16]
    GPIOB->MODER &= ~(3 << 10);
 8000338:	4b31      	ldr	r3, [pc, #196]	; (8000400 <GPIO_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a30      	ldr	r2, [pc, #192]	; (8000400 <GPIO_init+0x1d4>)
 800033e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000342:	6013      	str	r3, [r2, #0]

    GPIOB->PUPDR &= ~(3 << 8);
 8000344:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <GPIO_init+0x1d4>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a2d      	ldr	r2, [pc, #180]	; (8000400 <GPIO_init+0x1d4>)
 800034a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800034e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << 8);
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <GPIO_init+0x1d4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a2a      	ldr	r2, [pc, #168]	; (8000400 <GPIO_init+0x1d4>)
 8000356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800035a:	60d3      	str	r3, [r2, #12]

    GPIOB->PUPDR &= ~(3 << 10);
 800035c:	4b28      	ldr	r3, [pc, #160]	; (8000400 <GPIO_init+0x1d4>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a27      	ldr	r2, [pc, #156]	; (8000400 <GPIO_init+0x1d4>)
 8000362:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000366:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << 10);
 8000368:	4b25      	ldr	r3, [pc, #148]	; (8000400 <GPIO_init+0x1d4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a24      	ldr	r2, [pc, #144]	; (8000400 <GPIO_init+0x1d4>)
 800036e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000372:	60d3      	str	r3, [r2, #12]

    SysTick->LOAD = 0xCAF;				// 1hz 755554, 2hz 3AAAAA, 4hz 1D5555, 8hz EAAAA, 1024hz CAF
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <GPIO_init+0x1d8>)
 8000376:	f640 42af 	movw	r2, #3247	; 0xcaf
 800037a:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <GPIO_init+0x1d8>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0x07;
 8000382:	4b20      	ldr	r3, [pc, #128]	; (8000404 <GPIO_init+0x1d8>)
 8000384:	2207      	movs	r2, #7
 8000386:	601a      	str	r2, [r3, #0]

    SYSCFG->EXTICR[1] |= (1 << 0);
 8000388:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <GPIO_init+0x1dc>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	4a1e      	ldr	r2, [pc, #120]	; (8000408 <GPIO_init+0x1dc>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[1] |= (1 << 4);
 8000394:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <GPIO_init+0x1dc>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a1b      	ldr	r2, [pc, #108]	; (8000408 <GPIO_init+0x1dc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	60d3      	str	r3, [r2, #12]


    EXTI->IMR1 |= (3 << 4);
 80003a0:	4b1a      	ldr	r3, [pc, #104]	; (800040c <GPIO_init+0x1e0>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a19      	ldr	r2, [pc, #100]	; (800040c <GPIO_init+0x1e0>)
 80003a6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80003aa:	6013      	str	r3, [r2, #0]
    EXTI->FTSR1 |= (3 << 4);
 80003ac:	4b17      	ldr	r3, [pc, #92]	; (800040c <GPIO_init+0x1e0>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	4a16      	ldr	r2, [pc, #88]	; (800040c <GPIO_init+0x1e0>)
 80003b2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80003b6:	60d3      	str	r3, [r2, #12]



    NVIC->ISER[0] |= (1 << 10);
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <GPIO_init+0x1e4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a14      	ldr	r2, [pc, #80]	; (8000410 <GPIO_init+0x1e4>)
 80003be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003c2:	6013      	str	r3, [r2, #0]
    NVIC->ISER[0] |= (1 << 23);
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <GPIO_init+0x1e4>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a11      	ldr	r2, [pc, #68]	; (8000410 <GPIO_init+0x1e4>)
 80003ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003ce:	6013      	str	r3, [r2, #0]
    NVIC->ICPR[0] |= (1 << 10);
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <GPIO_init+0x1e4>)
 80003d2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <GPIO_init+0x1e4>)
 80003d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003dc:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    NVIC->ICPR[0] |= (1 << 23);
 80003e0:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <GPIO_init+0x1e4>)
 80003e2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80003e6:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <GPIO_init+0x1e4>)
 80003e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003ec:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000
 8000400:	48000400 	.word	0x48000400
 8000404:	e000e010 	.word	0xe000e010
 8000408:	40010000 	.word	0x40010000
 800040c:	40010400 	.word	0x40010400
 8000410:	e000e100 	.word	0xe000e100

08000414 <ISR_error>:
 *
 * Default interrupt handler for core interrupts.
 * Enables the green and red LED on the STefi Light board.
\* ------------------------------------------------------------------------------------ */
void ISR_error(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
    /* init */
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // PA: clock on (LEDs)
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <ISR_error+0x48>)
 800041a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041c:	4a0f      	ldr	r2, [pc, #60]	; (800045c <ISR_error+0x48>)
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	64d3      	str	r3, [r2, #76]	; 0x4c
    GPIOA->ODR |= MASK_LED_ALL;
 8000424:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800042e:	f043 030f 	orr.w	r3, r3, #15
 8000432:	6153      	str	r3, [r2, #20]
    GPIOA->MODER = (GPIOA->MODER & 0xFFFFFF00) | 0x11;
 8000434:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800043e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000442:	f043 0311 	orr.w	r3, r3, #17
 8000446:	6013      	str	r3, [r2, #0]

    while(1)
    {   /* light up the LEDs permanently */
        GPIOA->ODR &= ~(MASK_LED_GREEN | MASK_LED_RED);
 8000448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000452:	f023 0305 	bic.w	r3, r3, #5
 8000456:	6153      	str	r3, [r2, #20]
 8000458:	e7f6      	b.n	8000448 <ISR_error+0x34>
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <ISR_default>:
 *
 * Default interrupt handler for non-core interrupts.
 * Enables the blue and yellow LED on the STefi Light board.
\* ------------------------------------------------------------------------------------ */
void ISR_default(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
    /* init */
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // PA: clock on (LEDs)
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <ISR_default+0x48>)
 8000466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <ISR_default+0x48>)
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	64d3      	str	r3, [r2, #76]	; 0x4c
    GPIOA->ODR |= MASK_LED_ALL;
 8000470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800047a:	f043 030f 	orr.w	r3, r3, #15
 800047e:	6153      	str	r3, [r2, #20]
    GPIOA->MODER = (GPIOA->MODER & 0xFFFFFF00) | 0x44;
 8000480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800048a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800048e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000492:	6013      	str	r3, [r2, #0]

    while(1)
    {   /* light up the LEDs permanently */
        GPIOA->ODR &= ~(MASK_LED_BLUE | MASK_LED_YELLOW);
 8000494:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800049e:	f023 030a 	bic.w	r3, r3, #10
 80004a2:	6153      	str	r3, [r2, #20]
 80004a4:	e7f6      	b.n	8000494 <ISR_default+0x34>
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000

080004ac <button1>:
    }
}


void button1(void){
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0


}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <read1>:
 * Interrupt handler for STefi Light SysTick timer.
 * Currently, it does nothing.
 *
 * N.B. Don't forget to initialize the timer in task4.c!
\* ------------------------------------------------------------------------------------ */
int read1(void){
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
	int is_on = GPIOB->IDR;				//Load button S2 into memory
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <read1+0x28>)
 80004c4:	691b      	ldr	r3, [r3, #16]
 80004c6:	607b      	str	r3, [r7, #4]
	return !((is_on & (1<<4))>>4);		//Bitmask to isolate the value of S2 and move it to LSB. Invert because low-active
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f003 0310 	and.w	r3, r3, #16
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	bf0c      	ite	eq
 80004d2:	2301      	moveq	r3, #1
 80004d4:	2300      	movne	r3, #0
 80004d6:	b2db      	uxtb	r3, r3
}
 80004d8:	4618      	mov	r0, r3
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	48000400 	.word	0x48000400

080004e8 <read2>:
int read2(void){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
	int is_on = GPIOB->IDR;				//Load button S2 into memory
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <read2+0x28>)
 80004f0:	691b      	ldr	r3, [r3, #16]
 80004f2:	607b      	str	r3, [r7, #4]
	return !((is_on & (1<<5))>>5);		//Bitmask to isolate the value of S2 and move it to LSB. Invert because low-active
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f003 0320 	and.w	r3, r3, #32
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	bf0c      	ite	eq
 80004fe:	2301      	moveq	r3, #1
 8000500:	2300      	movne	r3, #0
 8000502:	b2db      	uxtb	r3, r3
}
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	48000400 	.word	0x48000400

08000514 <ISR_sysTick>:
void ISR_sysTick(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	count ++;
 8000518:	4b66      	ldr	r3, [pc, #408]	; (80006b4 <ISR_sysTick+0x1a0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a65      	ldr	r2, [pc, #404]	; (80006b4 <ISR_sysTick+0x1a0>)
 8000520:	6013      	str	r3, [r2, #0]
	if(debouncecount > 0){
 8000522:	4b65      	ldr	r3, [pc, #404]	; (80006b8 <ISR_sysTick+0x1a4>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	dd05      	ble.n	8000536 <ISR_sysTick+0x22>
		debouncecount --;
 800052a:	4b63      	ldr	r3, [pc, #396]	; (80006b8 <ISR_sysTick+0x1a4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	3b01      	subs	r3, #1
 8000530:	4a61      	ldr	r2, [pc, #388]	; (80006b8 <ISR_sysTick+0x1a4>)
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	e030      	b.n	8000598 <ISR_sysTick+0x84>
	}
	else if(debouncecount == 0){
 8000536:	4b60      	ldr	r3, [pc, #384]	; (80006b8 <ISR_sysTick+0x1a4>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d12c      	bne.n	8000598 <ISR_sysTick+0x84>
		if(updown == 2){
 800053e:	4b5f      	ldr	r3, [pc, #380]	; (80006bc <ISR_sysTick+0x1a8>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d111      	bne.n	800056a <ISR_sysTick+0x56>
			if(read1()){
 8000546:	f7ff ffb9 	bl	80004bc <read1>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00c      	beq.n	800056a <ISR_sysTick+0x56>
				if(freqmode != 256){
 8000550:	4b5b      	ldr	r3, [pc, #364]	; (80006c0 <ISR_sysTick+0x1ac>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000558:	d007      	beq.n	800056a <ISR_sysTick+0x56>
					freqmode = freqmode / 2;
 800055a:	4b59      	ldr	r3, [pc, #356]	; (80006c0 <ISR_sysTick+0x1ac>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	0fda      	lsrs	r2, r3, #31
 8000560:	4413      	add	r3, r2
 8000562:	105b      	asrs	r3, r3, #1
 8000564:	461a      	mov	r2, r3
 8000566:	4b56      	ldr	r3, [pc, #344]	; (80006c0 <ISR_sysTick+0x1ac>)
 8000568:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(updown == 1){
 800056a:	4b54      	ldr	r3, [pc, #336]	; (80006bc <ISR_sysTick+0x1a8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d10e      	bne.n	8000590 <ISR_sysTick+0x7c>
				if(read2()){
 8000572:	f7ff ffb9 	bl	80004e8 <read2>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d009      	beq.n	8000590 <ISR_sysTick+0x7c>
					if(freqmode != 4096){
 800057c:	4b50      	ldr	r3, [pc, #320]	; (80006c0 <ISR_sysTick+0x1ac>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000584:	d004      	beq.n	8000590 <ISR_sysTick+0x7c>
						freqmode = freqmode * 2;
 8000586:	4b4e      	ldr	r3, [pc, #312]	; (80006c0 <ISR_sysTick+0x1ac>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	4a4c      	ldr	r2, [pc, #304]	; (80006c0 <ISR_sysTick+0x1ac>)
 800058e:	6013      	str	r3, [r2, #0]
					}
				}
			}
		debouncecount = -1;
 8000590:	4b49      	ldr	r3, [pc, #292]	; (80006b8 <ISR_sysTick+0x1a4>)
 8000592:	f04f 32ff 	mov.w	r2, #4294967295
 8000596:	601a      	str	r2, [r3, #0]
	}

	if(count>freqmode&&freqmode == 4096){
 8000598:	4b46      	ldr	r3, [pc, #280]	; (80006b4 <ISR_sysTick+0x1a0>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b48      	ldr	r3, [pc, #288]	; (80006c0 <ISR_sysTick+0x1ac>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dd0d      	ble.n	80005c0 <ISR_sysTick+0xac>
 80005a4:	4b46      	ldr	r3, [pc, #280]	; (80006c0 <ISR_sysTick+0x1ac>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005ac:	d108      	bne.n	80005c0 <ISR_sysTick+0xac>
		GPIOA->ODR |= 0x0F;
 80005ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005b8:	f043 030f 	orr.w	r3, r3, #15
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	e06e      	b.n	800069e <ISR_sysTick+0x18a>
	}
	else if(count>freqmode&&freqmode == 2048){
 80005c0:	4b3c      	ldr	r3, [pc, #240]	; (80006b4 <ISR_sysTick+0x1a0>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b3e      	ldr	r3, [pc, #248]	; (80006c0 <ISR_sysTick+0x1ac>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dd15      	ble.n	80005f8 <ISR_sysTick+0xe4>
 80005cc:	4b3c      	ldr	r3, [pc, #240]	; (80006c0 <ISR_sysTick+0x1ac>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005d4:	d110      	bne.n	80005f8 <ISR_sysTick+0xe4>
		GPIOA->ODR ^= MASK_LED_RED;
 80005d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005e0:	f083 0301 	eor.w	r3, r3, #1
 80005e4:	6153      	str	r3, [r2, #20]
		GPIOA->ODR |= ~MASK_LED_RED;
 80005e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005f0:	f063 0301 	orn	r3, r3, #1
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	e052      	b.n	800069e <ISR_sysTick+0x18a>
	}
	else if(count>freqmode&&freqmode == 1024){
 80005f8:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <ISR_sysTick+0x1a0>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <ISR_sysTick+0x1ac>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	dd15      	ble.n	8000630 <ISR_sysTick+0x11c>
 8000604:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <ISR_sysTick+0x1ac>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800060c:	d110      	bne.n	8000630 <ISR_sysTick+0x11c>
		GPIOA->ODR ^= MASK_LED_YELLOW;
 800060e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000618:	f083 0302 	eor.w	r3, r3, #2
 800061c:	6153      	str	r3, [r2, #20]
		GPIOA->ODR |= ~MASK_LED_YELLOW;
 800061e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000628:	f063 0302 	orn	r3, r3, #2
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	e036      	b.n	800069e <ISR_sysTick+0x18a>
	}
	else if(count>freqmode&&freqmode == 512){
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <ISR_sysTick+0x1a0>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <ISR_sysTick+0x1ac>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	429a      	cmp	r2, r3
 800063a:	dd15      	ble.n	8000668 <ISR_sysTick+0x154>
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <ISR_sysTick+0x1ac>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000644:	d110      	bne.n	8000668 <ISR_sysTick+0x154>
		GPIOA->ODR ^= MASK_LED_GREEN;
 8000646:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000650:	f083 0304 	eor.w	r3, r3, #4
 8000654:	6153      	str	r3, [r2, #20]
		GPIOA->ODR |= ~MASK_LED_GREEN;
 8000656:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000660:	f063 0304 	orn	r3, r3, #4
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	e01a      	b.n	800069e <ISR_sysTick+0x18a>
	}
	else if(count>freqmode&&freqmode == 256){
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <ISR_sysTick+0x1a0>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <ISR_sysTick+0x1ac>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	dd14      	ble.n	800069e <ISR_sysTick+0x18a>
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <ISR_sysTick+0x1ac>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800067c:	d10f      	bne.n	800069e <ISR_sysTick+0x18a>
		GPIOA->ODR ^= MASK_LED_BLUE;
 800067e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000688:	f083 0308 	eor.w	r3, r3, #8
 800068c:	6153      	str	r3, [r2, #20]
		GPIOA->ODR |= ~MASK_LED_BLUE;
 800068e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000698:	f063 0308 	orn	r3, r3, #8
 800069c:	6153      	str	r3, [r2, #20]
	}
	if(count >= (freqmode+1)){
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <ISR_sysTick+0x1ac>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <ISR_sysTick+0x1a0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	da02      	bge.n	80006b0 <ISR_sysTick+0x19c>
		count = 0;
 80006aa:	4b02      	ldr	r3, [pc, #8]	; (80006b4 <ISR_sysTick+0x1a0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
	}
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000028 	.word	0x20000028
 80006b8:	20000004 	.word	0x20000004
 80006bc:	20000024 	.word	0x20000024
 80006c0:	20000000 	.word	0x20000000

080006c4 <ISR_4>:
 * method:  void ISR_4(void)
 *
 * Interrupt handler for  4.
\* ------------------------------------------------------------------------------------ */
 void ISR_4(void)
 {
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
		 if(takt > 0xEAAAA){
		 	  takt = takt/2;
		 	  SysTick->LOAD = takt;

	 }*/
	 updown = 2;
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <ISR_4+0x28>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	601a      	str	r2, [r3, #0]
	 debouncecount = 30;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <ISR_4+0x2c>)
 80006d0:	221e      	movs	r2, #30
 80006d2:	601a      	str	r2, [r3, #0]
	      EXTI->PR1 |= 0x1;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <ISR_4+0x30>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <ISR_4+0x30>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	6153      	str	r3, [r2, #20]
 }
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000024 	.word	0x20000024
 80006f0:	20000004 	.word	0x20000004
 80006f4:	40010400 	.word	0x40010400

080006f8 <ISR_5>:

 void ISR_5(void)
 {
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
	 if(takt <= 0x755554){
	     	 takt = takt*2;
	      	 SysTick->LOAD = takt;

	 }*/
	 updown = 1;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <ISR_5+0x28>)
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]
	 debouncecount = 30;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <ISR_5+0x2c>)
 8000704:	221e      	movs	r2, #30
 8000706:	601a      	str	r2, [r3, #0]
	 EXTI->PR1 |= 0x1;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <ISR_5+0x30>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <ISR_5+0x30>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6153      	str	r3, [r2, #20]
 }
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000024 	.word	0x20000024
 8000724:	20000004 	.word	0x20000004
 8000728:	40010400 	.word	0x40010400

0800072c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800072e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
//  bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <LoopForever+0x6>)
  ldr r1, =_edata
 8000732:	490d      	ldr	r1, [pc, #52]	; (8000768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <LoopForever+0xe>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000738:	e002      	b.n	8000740 <LoopCopyDataInit>

0800073a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800073c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073e:	3304      	adds	r3, #4

08000740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000744:	d3f9      	bcc.n	800073a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000748:	4c0a      	ldr	r4, [pc, #40]	; (8000774 <LoopForever+0x16>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800074c:	e001      	b.n	8000752 <LoopFillZerobss>

0800074e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000750:	3204      	adds	r2, #4

08000752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000754:	d3fb      	bcc.n	800074e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000756:	f000 f80f 	bl	8000778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075a:	f7ff fd5d 	bl	8000218 <main>

0800075e <LoopForever>:

LoopForever:
    b LoopForever
 800075e:	e7fe      	b.n	800075e <LoopForever>
  ldr   r0, =_estack
 8000760:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000768:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800076c:	080007e0 	.word	0x080007e0
  ldr r2, =_sbss
 8000770:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000774:	2000002c 	.word	0x2000002c

08000778 <__libc_init_array>:
 8000778:	b570      	push	{r4, r5, r6, lr}
 800077a:	4d0d      	ldr	r5, [pc, #52]	; (80007b0 <__libc_init_array+0x38>)
 800077c:	4c0d      	ldr	r4, [pc, #52]	; (80007b4 <__libc_init_array+0x3c>)
 800077e:	1b64      	subs	r4, r4, r5
 8000780:	10a4      	asrs	r4, r4, #2
 8000782:	2600      	movs	r6, #0
 8000784:	42a6      	cmp	r6, r4
 8000786:	d109      	bne.n	800079c <__libc_init_array+0x24>
 8000788:	4d0b      	ldr	r5, [pc, #44]	; (80007b8 <__libc_init_array+0x40>)
 800078a:	4c0c      	ldr	r4, [pc, #48]	; (80007bc <__libc_init_array+0x44>)
 800078c:	f000 f818 	bl	80007c0 <_init>
 8000790:	1b64      	subs	r4, r4, r5
 8000792:	10a4      	asrs	r4, r4, #2
 8000794:	2600      	movs	r6, #0
 8000796:	42a6      	cmp	r6, r4
 8000798:	d105      	bne.n	80007a6 <__libc_init_array+0x2e>
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a0:	4798      	blx	r3
 80007a2:	3601      	adds	r6, #1
 80007a4:	e7ee      	b.n	8000784 <__libc_init_array+0xc>
 80007a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007aa:	4798      	blx	r3
 80007ac:	3601      	adds	r6, #1
 80007ae:	e7f2      	b.n	8000796 <__libc_init_array+0x1e>
 80007b0:	080007d8 	.word	0x080007d8
 80007b4:	080007d8 	.word	0x080007d8
 80007b8:	080007d8 	.word	0x080007d8
 80007bc:	080007dc 	.word	0x080007dc

080007c0 <_init>:
 80007c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c2:	bf00      	nop
 80007c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c6:	bc08      	pop	{r3}
 80007c8:	469e      	mov	lr, r3
 80007ca:	4770      	bx	lr

080007cc <_fini>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	bf00      	nop
 80007d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d2:	bc08      	pop	{r3}
 80007d4:	469e      	mov	lr, r3
 80007d6:	4770      	bx	lr
