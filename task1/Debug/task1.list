
task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006cc  080006d4  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006cc  080006cc  000106d4  2**0
                  CONTENTS
  4 .ARM          00000000  080006cc  080006cc  000106d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006cc  080006d4  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006cc  080006cc  000106cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006d0  080006d0  000106d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000106d4  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000106d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a61  00000000  00000000  00010704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000030b  00000000  00000000  00011165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00011470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000058  00000000  00000000  00011508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001373a  00000000  00000000  00011560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000aba  00000000  00000000  00024c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006f833  00000000  00000000  00025754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00094f87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000164  00000000  00000000  00094fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080006b4 	.word	0x080006b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	080006b4 	.word	0x080006b4

08000218 <main>:
int read2(void);
void statecheck(void);

/* ------------------------------------ M A I N --------------------------------------- */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800021c:	b672      	cpsid	i
}
 800021e:	bf00      	nop
    /* --- initialization --- */
    __disable_irq();        // disable interrupts globally

    GPIO_init();
 8000220:	f000 f8e4 	bl	80003ec <GPIO_init>
  __ASM volatile ("cpsie i" : : : "memory");
 8000224:	b662      	cpsie	i
}
 8000226:	bf00      	nop

    /* --- infinite processing loop --- */
    while (1)
    {
        /* ... Main Loop ... */
    	if(shouldbeon){
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <main+0x24>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <main+0x1c>
    		lauflicht();
 8000230:	f000 f806 	bl	8000240 <lauflicht>
    	}
    	statecheck();
 8000234:	f000 f8be 	bl	80003b4 <statecheck>
    	if(shouldbeon){
 8000238:	e7f6      	b.n	8000228 <main+0x10>
 800023a:	bf00      	nop
 800023c:	2000001c 	.word	0x2000001c

08000240 <lauflicht>:
    }

    return 1;
}

int lauflicht(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= MASK_LED_RED; 		//LED Anschalten
 8000244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800024e:	f083 0301 	eor.w	r3, r3, #1
 8000252:	6153      	str	r3, [r2, #20]
	delayws(WAITTIME);					//Warten
 8000254:	f240 209a 	movw	r0, #666	; 0x29a
 8000258:	f000 f974 	bl	8000544 <delayws>
	GPIOA->ODR ^= MASK_LED_RED;			//LED Abschalten
 800025c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000266:	f083 0301 	eor.w	r3, r3, #1
 800026a:	6153      	str	r3, [r2, #20]
	if(!shouldbeon){return 1;}				//Prüfen, ob Schalter gedrückt ist
 800026c:	4b42      	ldr	r3, [pc, #264]	; (8000378 <lauflicht+0x138>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d101      	bne.n	8000278 <lauflicht+0x38>
 8000274:	2301      	movs	r3, #1
 8000276:	e07c      	b.n	8000372 <lauflicht+0x132>
	GPIOA->ODR ^= MASK_LED_YELLOW;		//...
 8000278:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000282:	f083 0302 	eor.w	r3, r3, #2
 8000286:	6153      	str	r3, [r2, #20]
	delayws(WAITTIME);
 8000288:	f240 209a 	movw	r0, #666	; 0x29a
 800028c:	f000 f95a 	bl	8000544 <delayws>
	GPIOA->ODR ^= MASK_LED_YELLOW;
 8000290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029a:	f083 0302 	eor.w	r3, r3, #2
 800029e:	6153      	str	r3, [r2, #20]
	if(!shouldbeon){return 1;}
 80002a0:	4b35      	ldr	r3, [pc, #212]	; (8000378 <lauflicht+0x138>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d101      	bne.n	80002ac <lauflicht+0x6c>
 80002a8:	2301      	movs	r3, #1
 80002aa:	e062      	b.n	8000372 <lauflicht+0x132>
	GPIOA->ODR ^= MASK_LED_GREEN;
 80002ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b6:	f083 0304 	eor.w	r3, r3, #4
 80002ba:	6153      	str	r3, [r2, #20]
	delayws(WAITTIME);
 80002bc:	f240 209a 	movw	r0, #666	; 0x29a
 80002c0:	f000 f940 	bl	8000544 <delayws>
	GPIOA->ODR ^= MASK_LED_GREEN;
 80002c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ce:	f083 0304 	eor.w	r3, r3, #4
 80002d2:	6153      	str	r3, [r2, #20]
	if(!shouldbeon){return 1;}
 80002d4:	4b28      	ldr	r3, [pc, #160]	; (8000378 <lauflicht+0x138>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d101      	bne.n	80002e0 <lauflicht+0xa0>
 80002dc:	2301      	movs	r3, #1
 80002de:	e048      	b.n	8000372 <lauflicht+0x132>
	GPIOA->ODR ^= MASK_LED_BLUE;
 80002e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ea:	f083 0308 	eor.w	r3, r3, #8
 80002ee:	6153      	str	r3, [r2, #20]
	delayws(WAITTIME);
 80002f0:	f240 209a 	movw	r0, #666	; 0x29a
 80002f4:	f000 f926 	bl	8000544 <delayws>
	GPIOA->ODR ^= MASK_LED_BLUE; 		//Richtungswechsel
 80002f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000302:	f083 0308 	eor.w	r3, r3, #8
 8000306:	6153      	str	r3, [r2, #20]
	if(!shouldbeon){return 1;}
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <lauflicht+0x138>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d101      	bne.n	8000314 <lauflicht+0xd4>
 8000310:	2301      	movs	r3, #1
 8000312:	e02e      	b.n	8000372 <lauflicht+0x132>
	GPIOA->ODR ^= MASK_LED_GREEN;
 8000314:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800031e:	f083 0304 	eor.w	r3, r3, #4
 8000322:	6153      	str	r3, [r2, #20]
	delayws(WAITTIME);
 8000324:	f240 209a 	movw	r0, #666	; 0x29a
 8000328:	f000 f90c 	bl	8000544 <delayws>
	GPIOA->ODR ^= MASK_LED_GREEN;
 800032c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000336:	f083 0304 	eor.w	r3, r3, #4
 800033a:	6153      	str	r3, [r2, #20]
	if(!shouldbeon){return 1;}
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <lauflicht+0x138>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d101      	bne.n	8000348 <lauflicht+0x108>
 8000344:	2301      	movs	r3, #1
 8000346:	e014      	b.n	8000372 <lauflicht+0x132>
	GPIOA->ODR ^= MASK_LED_YELLOW;
 8000348:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000352:	f083 0302 	eor.w	r3, r3, #2
 8000356:	6153      	str	r3, [r2, #20]
	delayws(WAITTIME);
 8000358:	f240 209a 	movw	r0, #666	; 0x29a
 800035c:	f000 f8f2 	bl	8000544 <delayws>
	GPIOA->ODR ^= MASK_LED_YELLOW;
 8000360:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800036a:	f083 0302 	eor.w	r3, r3, #2
 800036e:	6153      	str	r3, [r2, #20]
	return 1;
 8000370:	2301      	movs	r3, #1
}
 8000372:	4618      	mov	r0, r3
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	2000001c 	.word	0x2000001c

0800037c <read2>:

int read2(void){
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
	int is_on;
	is_on = GPIOB->IDR;				//Taster S2 Abfragen
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <read2+0x34>)
 8000384:	691b      	ldr	r3, [r3, #16]
 8000386:	607b      	str	r3, [r7, #4]
	is_on = (is_on & (1<<5));		//Bitmaske, um S2 Wert zu isolieren und auf Stelle 0 zu bewegen
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f003 0320 	and.w	r3, r3, #32
 800038e:	607b      	str	r3, [r7, #4]
	is_on = is_on>>5;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	115b      	asrs	r3, r3, #5
 8000394:	607b      	str	r3, [r7, #4]
	return !is_on;					//invertieren, da LOW-Aktiv
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	2b00      	cmp	r3, #0
 800039a:	bf0c      	ite	eq
 800039c:	2301      	moveq	r3, #1
 800039e:	2300      	movne	r3, #0
 80003a0:	b2db      	uxtb	r3, r3

}
 80003a2:	4618      	mov	r0, r3
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	48000400 	.word	0x48000400

080003b4 <statecheck>:

void statecheck(void){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	if(read2()){
 80003b8:	f7ff ffe0 	bl	800037c <read2>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d010      	beq.n	80003e4 <statecheck+0x30>
		if(shouldbeon){
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <statecheck+0x34>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d006      	beq.n	80003d8 <statecheck+0x24>
			shouldbeon = 0;
 80003ca:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <statecheck+0x34>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
			delay(50);
 80003d0:	2032      	movs	r0, #50	; 0x32
 80003d2:	f000 f895 	bl	8000500 <delay>
			delay(50);
			//while(read2()){}
		}
	}

}
 80003d6:	e005      	b.n	80003e4 <statecheck+0x30>
			shouldbeon = 1;
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <statecheck+0x34>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
			delay(50);
 80003de:	2032      	movs	r0, #50	; 0x32
 80003e0:	f000 f88e 	bl	8000500 <delay>
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	2000001c 	.word	0x2000001c

080003ec <GPIO_init>:
 * requires:    - nothing -
 * parameters:  - none -
 * returns:     - nothing -
\* ------------------------------------------------------------------------------------ */
static void GPIO_init(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
    /* enable port clocks */
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // LEDs: A
 80003f0:	4b41      	ldr	r3, [pc, #260]	; (80004f8 <GPIO_init+0x10c>)
 80003f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f4:	4a40      	ldr	r2, [pc, #256]	; (80004f8 <GPIO_init+0x10c>)
 80003f6:	f043 0301 	orr.w	r3, r3, #1
 80003fa:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;    // Buttons: B
 80003fc:	4b3e      	ldr	r3, [pc, #248]	; (80004f8 <GPIO_init+0x10c>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	4a3d      	ldr	r2, [pc, #244]	; (80004f8 <GPIO_init+0x10c>)
 8000402:	f043 0302 	orr.w	r3, r3, #2
 8000406:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* --- LEDs --- */
    GPIOA->ODR |= MASK_LED_RED;
 8000408:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3 << 0);
 8000418:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000422:	f023 0303 	bic.w	r3, r3, #3
 8000426:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << 0);               // set LED 0 pin (PA0) to output
 8000428:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	6013      	str	r3, [r2, #0]

    GPIOA->ODR |= MASK_LED_YELLOW;
 8000438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000442:	f043 0302 	orr.w	r3, r3, #2
 8000446:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3 << 2);
 8000448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000452:	f023 030c 	bic.w	r3, r3, #12
 8000456:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << 2);               // set LED 1 pin (PA1) to output
 8000458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6013      	str	r3, [r2, #0]

    GPIOA->ODR |= MASK_LED_GREEN;
 8000468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3 << 4);
 8000478:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000482:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000486:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << 4);               // set LED 2 pin (PA2) to output
 8000488:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000492:	f043 0310 	orr.w	r3, r3, #16
 8000496:	6013      	str	r3, [r2, #0]

    GPIOA->ODR |= MASK_LED_BLUE;
 8000498:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3 << 6);
 80004a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80004b6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << 6);               // set LED 3 pin (PA3) to output
 80004b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004c6:	6013      	str	r3, [r2, #0]

    //GPIOB->ODR |= MASK_S2;
    GPIOB->MODER &= ~(3 << 10);             // set Button 2 pin (PB5) to input
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <GPIO_init+0x110>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <GPIO_init+0x110>)
 80004ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80004d2:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(3 << 10);				//PULL-UP
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <GPIO_init+0x110>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	4a08      	ldr	r2, [pc, #32]	; (80004fc <GPIO_init+0x110>)
 80004da:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80004de:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << 10);
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <GPIO_init+0x110>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	4a05      	ldr	r2, [pc, #20]	; (80004fc <GPIO_init+0x110>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	60d3      	str	r3, [r2, #12]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	48000400 	.word	0x48000400

08000500 <delay>:
 * requires:    - nothing -
 * parameters:  ms - delay time in milliseconds
 * returns:     - nothing -
\* ------------------------------------------------------------------------------------ */
static void delay(const uint16_t ms)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]

    for (uint16_t i = 0; i < ms; ++i)
 800050a:	2300      	movs	r3, #0
 800050c:	81fb      	strh	r3, [r7, #14]
 800050e:	e00e      	b.n	800052e <delay+0x2e>
    {
        for (uint16_t j = 0; j < LOOPS_PER_MS; ++j)
 8000510:	2300      	movs	r3, #0
 8000512:	81bb      	strh	r3, [r7, #12]
 8000514:	e003      	b.n	800051e <delay+0x1e>
        {
            __asm("NOP");
 8000516:	bf00      	nop
        for (uint16_t j = 0; j < LOOPS_PER_MS; ++j)
 8000518:	89bb      	ldrh	r3, [r7, #12]
 800051a:	3301      	adds	r3, #1
 800051c:	81bb      	strh	r3, [r7, #12]
 800051e:	89bb      	ldrh	r3, [r7, #12]
 8000520:	f240 226d 	movw	r2, #621	; 0x26d
 8000524:	4293      	cmp	r3, r2
 8000526:	d9f6      	bls.n	8000516 <delay+0x16>
    for (uint16_t i = 0; i < ms; ++i)
 8000528:	89fb      	ldrh	r3, [r7, #14]
 800052a:	3301      	adds	r3, #1
 800052c:	81fb      	strh	r3, [r7, #14]
 800052e:	89fa      	ldrh	r2, [r7, #14]
 8000530:	88fb      	ldrh	r3, [r7, #6]
 8000532:	429a      	cmp	r2, r3
 8000534:	d3ec      	bcc.n	8000510 <delay+0x10>
        }
    }
}
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <delayws>:

static void delayws(const uint16_t ms)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]

    for (uint16_t i = 0; i < ms; ++i)
 800054e:	2300      	movs	r3, #0
 8000550:	81fb      	strh	r3, [r7, #14]
 8000552:	e010      	b.n	8000576 <delayws+0x32>
    {
    	statecheck();
 8000554:	f7ff ff2e 	bl	80003b4 <statecheck>
        for (uint16_t j = 0; j < LOOPS_PER_MS; ++j)
 8000558:	2300      	movs	r3, #0
 800055a:	81bb      	strh	r3, [r7, #12]
 800055c:	e003      	b.n	8000566 <delayws+0x22>
        {
            __asm("NOP");
 800055e:	bf00      	nop
        for (uint16_t j = 0; j < LOOPS_PER_MS; ++j)
 8000560:	89bb      	ldrh	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	81bb      	strh	r3, [r7, #12]
 8000566:	89bb      	ldrh	r3, [r7, #12]
 8000568:	f240 226d 	movw	r2, #621	; 0x26d
 800056c:	4293      	cmp	r3, r2
 800056e:	d9f6      	bls.n	800055e <delayws+0x1a>
    for (uint16_t i = 0; i < ms; ++i)
 8000570:	89fb      	ldrh	r3, [r7, #14]
 8000572:	3301      	adds	r3, #1
 8000574:	81fb      	strh	r3, [r7, #14]
 8000576:	89fa      	ldrh	r2, [r7, #14]
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	429a      	cmp	r2, r3
 800057c:	d3ea      	bcc.n	8000554 <delayws+0x10>
        }
    }
}
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <ISR_error>:
 *
 * Default interrupt handler for core interrupts.
 * Enables the green and red LED on the STefi Light board.
\* ------------------------------------------------------------------------------------ */
void ISR_error(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
    /* init */
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // PA: clock on (LEDs)
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <ISR_error+0x48>)
 800058e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000590:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <ISR_error+0x48>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	64d3      	str	r3, [r2, #76]	; 0x4c
    GPIOA->ODR |= MASK_LED_ALL;
 8000598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005a2:	f043 030f 	orr.w	r3, r3, #15
 80005a6:	6153      	str	r3, [r2, #20]
    GPIOA->MODER = (GPIOA->MODER & 0xFFFFFF00) | 0x11;
 80005a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005b6:	f043 0311 	orr.w	r3, r3, #17
 80005ba:	6013      	str	r3, [r2, #0]

    while(1)
    {   /* light up the LEDs permanently */
        GPIOA->ODR &= ~(MASK_LED_GREEN | MASK_LED_RED);
 80005bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005c6:	f023 0305 	bic.w	r3, r3, #5
 80005ca:	6153      	str	r3, [r2, #20]
 80005cc:	e7f6      	b.n	80005bc <ISR_error+0x34>
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <ISR_default>:
 *
 * Default interrupt handler for non-core interrupts.
 * Enables the blue and yellow LED on the STefi Light board.
\* ------------------------------------------------------------------------------------ */
void ISR_default(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
    /* init */
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // PA: clock on (LEDs)
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <ISR_default+0x48>)
 80005da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005dc:	4a0f      	ldr	r2, [pc, #60]	; (800061c <ISR_default+0x48>)
 80005de:	f043 0301 	orr.w	r3, r3, #1
 80005e2:	64d3      	str	r3, [r2, #76]	; 0x4c
    GPIOA->ODR |= MASK_LED_ALL;
 80005e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ee:	f043 030f 	orr.w	r3, r3, #15
 80005f2:	6153      	str	r3, [r2, #20]
    GPIOA->MODER = (GPIOA->MODER & 0xFFFFFF00) | 0x44;
 80005f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000602:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000606:	6013      	str	r3, [r2, #0]

    while(1)
    {   /* light up the LEDs permanently */        GPIOA->ODR &= ~(MASK_LED_BLUE | MASK_LED_YELLOW);
 8000608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000612:	f023 030a 	bic.w	r3, r3, #10
 8000616:	6153      	str	r3, [r2, #20]
 8000618:	e7f6      	b.n	8000608 <ISR_default+0x34>
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000

08000620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000622:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
//  bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0a      	ldr	r4, [pc, #40]	; (8000668 <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064a:	f000 f80f 	bl	800066c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064e:	f7ff fde3 	bl	8000218 <main>

08000652 <LoopForever>:

LoopForever:
    b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   r0, =_estack
 8000654:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000660:	080006d4 	.word	0x080006d4
  ldr r2, =_sbss
 8000664:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000668:	20000020 	.word	0x20000020

0800066c <__libc_init_array>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4d0d      	ldr	r5, [pc, #52]	; (80006a4 <__libc_init_array+0x38>)
 8000670:	4c0d      	ldr	r4, [pc, #52]	; (80006a8 <__libc_init_array+0x3c>)
 8000672:	1b64      	subs	r4, r4, r5
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	2600      	movs	r6, #0
 8000678:	42a6      	cmp	r6, r4
 800067a:	d109      	bne.n	8000690 <__libc_init_array+0x24>
 800067c:	4d0b      	ldr	r5, [pc, #44]	; (80006ac <__libc_init_array+0x40>)
 800067e:	4c0c      	ldr	r4, [pc, #48]	; (80006b0 <__libc_init_array+0x44>)
 8000680:	f000 f818 	bl	80006b4 <_init>
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	2600      	movs	r6, #0
 800068a:	42a6      	cmp	r6, r4
 800068c:	d105      	bne.n	800069a <__libc_init_array+0x2e>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f855 3b04 	ldr.w	r3, [r5], #4
 8000694:	4798      	blx	r3
 8000696:	3601      	adds	r6, #1
 8000698:	e7ee      	b.n	8000678 <__libc_init_array+0xc>
 800069a:	f855 3b04 	ldr.w	r3, [r5], #4
 800069e:	4798      	blx	r3
 80006a0:	3601      	adds	r6, #1
 80006a2:	e7f2      	b.n	800068a <__libc_init_array+0x1e>
 80006a4:	080006cc 	.word	0x080006cc
 80006a8:	080006cc 	.word	0x080006cc
 80006ac:	080006cc 	.word	0x080006cc
 80006b0:	080006d0 	.word	0x080006d0

080006b4 <_init>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	bf00      	nop
 80006b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ba:	bc08      	pop	{r3}
 80006bc:	469e      	mov	lr, r3
 80006be:	4770      	bx	lr

080006c0 <_fini>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	bf00      	nop
 80006c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c6:	bc08      	pop	{r3}
 80006c8:	469e      	mov	lr, r3
 80006ca:	4770      	bx	lr
